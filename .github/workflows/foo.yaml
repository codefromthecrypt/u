---
name: "foo"

on:
  push:
    tags: ''
    branches: master
  pull_request:
    branches: master
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  go-stuff:
    name: "Test go stuff (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    steps:
      - uses: actions/checkout@v2

      # This configures Go according to go.mod, choosing the latest minor revision in RUNNER_TOOL_CACHE
      #
      # * RUNNER_TOOL_CACHE lags Go releases by 1-2 weeks. See https://github.com/actions/virtual-environments
      # * As this reads go.mod, this relies on actions/checkout though full history is not necessary.
      - name: "Configure Go"
        run: |
          go_version=$(sed -n 's/^go //gp' go.mod)
          echo GO_VERSION=${go_version} >> $GITHUB_ENV
          go_root=$(ls -d ${RUNNER_TOOL_CACHE}/go/${go_version}*/x64|sort -n|tail -1)
          echo GOROOT=${go_root} >> $GITHUB_ENV
          echo ${go_root}/bin >> $GITHUB_PATH
          # export the OS-specific GOCACHE (build cache) variable for actions/cache
          echo GOCACHE=$(${go_root}/bin/go env GOCACHE) >> $GITHUB_ENV

      - name: "Cache Go"
        uses: actions/cache@v2
        with:
          path: |  # Cache downloaded Go modules and the GOCACHE (to cache `go run` builds invoked by Makefile)
            ~/go/pkg/mod
            ${{ env.GOCACHE }}
          key: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: "Test Go"
        run: |
          env | grep GO
          echo ----
          go env
          go version
