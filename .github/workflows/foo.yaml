---
name: "foo"

on:
  push:
    tags: ''
    branches: master
  pull_request:
    branches: master
  workflow_dispatch:

# GOROOT_NAME resolves a GOROOT path corresponding to a major Golang release on the current runner.
# Ex. Given GOROOT_NAME=GOROOT_1_17_X64, ${!GOROOT_NAME}=/Users/runner/hostedtoolcache/go/1.17.1/x64
# See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#environment-variables-2
env:
  GOROOT_NAME: GOROOT_1_17_X64

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  go-stuff:
    name: "Test go stuff (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    steps:
      # This sets the version-specific GOROOT env on macOS until actions/virtual-environments#4156
      #
      # This must happen before interpolating ${!GOROOT_NAME} on macOS
      - name: "Set GOROOT_X64 env (macOS)"
        if: runner.os == 'macOS'
        run: |  # ex GOROOT_1_17_X64 -> 1.17
          go_version=$(echo ${GOROOT_NAME//_/.}| cut -d. -f2,3)
          go_root=$(ls -d /Users/runner/hostedtoolcache/go/${go_version}*/x64|sort -n|tail -1)
          echo "${GOROOT_NAME}=${go_root}" >> $GITHUB_ENV

      - name: "Configure Go"
        run: |
          go_path=${!GOROOT_NAME}/bin
          for var in GOROOT GOCACHE GOMODCACHE; do
            echo ${var}=$(${go_path}/go env ${var}) >> $GITHUB_ENV
          done
          echo ${go_path} >> $GITHUB_PATH

      - name: "Test Go"
        run: |
          echo $GOROOT
          echo $GOCACHE
          echo $GOMODCACHE
          echo $PATH
          go version
