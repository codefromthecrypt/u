# yamllint --format github .github/workflows/internal-images.yml
---
name: internal-images

# Refresh the tags once a day. This limits impact of rate-limited images. See RATIONALE.md
on:
  schedule:
    - cron: "23 3 * * *"
  workflow_dispatch:  # Allows manual refresh

env:  # Update this prior to requiring a higher minor version in go.mod
  GO_VERSION: "1.17"  # Latest patch

# This builds images and pushes them to ghcr.io/tetratelabs/func-e-internal:$tag
# Using these in tests and as a parent (FROM) avoids docker.io rate-limits particularly on pull requests.
#
# To troubleshoot, run locally with docker and install go directly. Ex:
# ```bash
# $ docker run -ti -v $PWD:/func-e --rm centos:8
# [root@d37da4601545 /]# cd /func-e
# now execute your setup commands!
# ```
jobs:
  build-and-push-images:
    strategy:
      matrix:
        # Be precise in tag versions to improve reproducibility
        include:
          # This installs the dependencies needed to build func-e including the latest minor revision of go.
          # This Dockerfile is inlined, so we don't need to check out the source repository.
          - dockerfile: |
              FROM centos:8
              RUN yum install -y --quiet make which git gcc && yum clean all

              ARG GO_MINOR_REVISION
              RUN curl -sSL https://golang.org/dl/go$GO_MINOR_REVISION.linux-$TARGETARCH.tar.gz | tar -xzC /usr/local
              ENV GOROOT=/usr/local/go
              ENV GOPATH=/usr/lib/go
              ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            target_tag: centos8
    runs-on: ubuntu-latest
    steps:
      # We need QEMU and Buildx for multi-platform (amd64+arm64) image push. See RATIONALE.md
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      # The GO_VERSION is a major release (ex 1.17), but we want GO_MINOR_REVISION (ex 1.17.1).
      #
      # Unlike a lot of projects, golang does not attach binaries to releases, so there's a race.
      # Also, we don't want to see release candidates. In summary, we can't use GitHub for this.
      #
      # Instead, we parse https://golang.org/dl to get the latest minor revision of GO_VERSION.
      # We use gimme instead of replicating the same manually: https://github.com/travis-ci/gimme
      - name: Resolve Go minor revision
        run: |
          GIMME_SCRIPT=https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
          GO_MINOR_REVISION=$(curl -sSL ${GIMME_SCRIPT} | GIMME_GO_VERSION=${{ env.GO_VERSION }}.x bash -s -- -r)
          echo "::set-env name=GO_MINOR_REVISION::${GO_MINOR_REVISION}"

      - name: Write Dockerfile
        run: |
          cat > Dockerfile <<'EOF'
          ${{ matrix.dockerfile }}
          EOF

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: GO_MINOR_REVISION=${{ env.GO_MINOR_REVISION }}
          context: .
          platforms: linux/amd64,linux/arm64  # arm64 is run only by Travis. See RATIONALE.md
          tags: ghcr.io/${{ github.repository_owner }}/func-e-internal:${{ matrix.target_tag }}
